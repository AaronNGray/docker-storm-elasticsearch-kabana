version: '3.2'

services:
  zookeeper:
    image: zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - 2181:2181
    networks:
      - storm

  nimbus:
    image: storm:$STORM_VERSION
    container_name: nimbus
    command: storm nimbus
    depends_on:
      - zookeeper
    links:
      - zookeeper
    restart: always
    ports:
      - 6627:6627
      - 3772:3772
      - 3773:3773
      - 3774:3774
    networks:
      - storm

  supervisor:
    image: storm:$STORM_VERSION
    container_name: supervisor
    command: storm supervisor
    depends_on:
      - nimbus
      - zookeeper
    links:
      - nimbus
      - zookeeper
    networks:
      - storm
    restart: always

  ui:
    image: storm:$STORM_VERSION
    container_name: ui
    command: storm ui
    depends_on:
      - nimbus
      - zookeeper
      - supervisor
    links:
      - nimbus
      - zookeeper
      - supervisor
    ports:
      - 8080:8080
    networks:
      - storm
    restart: always

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: $ELASTIC_VERSION
        STORM_VERSION: $STORM_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: $ELASTIC_PASSWORD
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - storm
    healthcheck:
      test: curl -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: $ELASTIC_VERSION
        STORM_VERSION: $STORM_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - storm
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: $ELASTIC_VERSION
        STORM_VERSION: $STORM_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - storm
    depends_on:
      - elasticsearch
    healthcheck:
      test: curl -s https://localhost:5601 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5


networks:
  storm:
    driver: bridge

volumes:
  elasticsearch:
